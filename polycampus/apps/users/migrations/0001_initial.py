# Generated by Django 5.2.5 on 2025-08-23 21:23

import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
import django_extensions.db.fields
import tenant_users.permissions.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(default=False, verbose_name="verified"),
                ),
                (
                    "organisation_code",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=20),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="email address"
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        max_length=150, unique=True, verbose_name="username"
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, null=True, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, null=True, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "approval_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("APPROVED", "Approved"),
                            ("DISAPPROVED", "Disapproved"),
                            ("REMOVED", "Removed"),
                        ],
                        default="PENDING",
                        help_text="Designates whether this user's profile has been approved.",
                        max_length=25,
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "is_manualy_deactivated",
                    models.BooleanField(default=False, verbose_name="Deleted Manually"),
                ),
                (
                    "tenants",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The tenants this user belongs to.",
                        related_name="user_set",
                        to="core.organisation",
                        verbose_name="tenants",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "User",
            },
            bases=(
                models.Model,
                tenant_users.permissions.models.PermissionsMixinFacade,
            ),
        ),
        migrations.CreateModel(
            name="AdminTenant",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("users.user",),
        ),
        migrations.CreateModel(
            name="PolycampusUser",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("users.user",),
        ),
        migrations.CreateModel(
            name="StudentUser",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("users.user",),
        ),
        migrations.CreateModel(
            name="TeacherUser",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("users.user",),
        ),
        migrations.CreateModel(
            name="Otp",
            fields=[
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "status",
                    models.IntegerField(
                        choices=[(0, "Inactive"), (1, "Active")],
                        default=1,
                        verbose_name="status",
                    ),
                ),
                (
                    "activate_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="keep empty for an immediate activation",
                        null=True,
                    ),
                ),
                (
                    "deactivate_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="keep empty for indefinite activation",
                        null=True,
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("is_deleted", models.BooleanField(default=False)),
                ("metadata", models.JSONField(blank=True, default=dict, null=True)),
                (
                    "otp_code",
                    models.CharField(
                        blank=True, max_length=6, null=True, verbose_name="OTP Code"
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "ordering": ("created",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "status",
                    models.IntegerField(
                        choices=[(0, "Inactive"), (1, "Active")],
                        default=1,
                        verbose_name="status",
                    ),
                ),
                (
                    "activate_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="keep empty for an immediate activation",
                        null=True,
                    ),
                ),
                (
                    "deactivate_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="keep empty for indefinite activation",
                        null=True,
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("is_deleted", models.BooleanField(default=False)),
                ("metadata", models.JSONField(blank=True, default=dict, null=True)),
                (
                    "bio",
                    models.CharField(
                        blank=True, max_length=1000, null=True, verbose_name="Biography"
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="Phone Number",
                    ),
                ),
                (
                    "address1",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="Address 1"
                    ),
                ),
                (
                    "address2",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="Address 2"
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="City"
                    ),
                ),
                (
                    "quater",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="Quater"
                    ),
                ),
                (
                    "profiletype",
                    models.CharField(
                        choices=[(" student", "student"), (" teacher", "teacher")],
                        default=" student",
                        help_text="Which type of profile is this profile",
                        max_length=50,
                        verbose_name="Profile Type",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[("MALE", "Male"), ("FEMALE", "Female")],
                        help_text="The applicant's gender as per their ID document.",
                        max_length=20,
                        verbose_name="Gender",
                    ),
                ),
                (
                    "photo",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="profile-picture",
                        verbose_name="Profile Picture",
                    ),
                ),
                (
                    "documents",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="verified_documents/",
                        verbose_name="receipt, student card",
                    ),
                ),
                (
                    "certifications",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Certifications, bullet points",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "ordering": ("created",),
                "abstract": False,
            },
        ),
    ]
